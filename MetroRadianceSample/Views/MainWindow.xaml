<metro:MetroWindow x:Class="MetroRadianceSample.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:MetroRadianceSample.Views"
        xmlns:vm="clr-namespace:MetroRadianceSample.ViewModels"
        xmlns:metro="http://schemes.grabacr.net/winfx/2014/controls"
        Background="{DynamicResource ThemeBrushKey}"
		Foreground="{DynamicResource ActiveForegroundBrushKey}"
        Topmost="{Binding TopMost}"
        Title="MainWindow" Height="350" Width="525">
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    
    <Window.Resources>
        <Style TargetType="TextBlock">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="8" />
        </Style>

        <Style x:Key="ChromeIconBaseKey"
		   TargetType="{x:Type Path}">
            <Setter Property="Width"
				Value="12" />
            <Setter Property="Fill"
				Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentControl}}, Path=Foreground}" />
            <Setter Property="Stretch"
				Value="Uniform" />
            <Setter Property="SnapsToDevicePixels"
				Value="True" />
        </Style>

        <Style x:Key="PinButtonStyleKey"
		   TargetType="{x:Type metro:CaptionButton}">
            <Setter Property="Mode"
				Value="Toggle" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type metro:CaptionButton}">
                        <Border x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid Margin="{TemplateBinding Padding}"
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter x:Name="contentPresenter" />
                                <Path x:Name="icon"
								  Data="M392,204 C361.88214,197.76072 336.11728,205.81897 314.5,227.5 L352.5,265 269.5,373 378,290 415.5,327.5 C436.92773,310.6158 445.26955,285.2296 440,251 L518.5,191 C525.16649,185.66709 526.24997,179.50029 522,174 L469,121 C464.83328,116.5005 457.49995,117.50039 454,122.5 z"
								  Width="14"
								  Style="{DynamicResource ChromeIconBaseKey}">
                                    <Path.LayoutTransform>
                                        <RotateTransform Angle="0" />
                                    </Path.LayoutTransform>
                                </Path>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked"
								 Value="True">
                                <Setter TargetName="icon"
									Property="LayoutTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-45" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Background"
									Value="{DynamicResource AccentBrushKey}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver"
					 Value="True">
                    <Setter Property="Background"
						Value="{DynamicResource ActiveBackgroundBrushKey}" />
                    <Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
                    <Setter Property="Foreground"
						Value="{DynamicResource ActiveForegroundBrushKey}" />
                </Trigger>
                <Trigger Property="IsPressed"
					 Value="True">
                    <Setter Property="Background"
						Value="{DynamicResource AccentBrushKey}" />
                    <Setter Property="BorderBrush"
						Value="{DynamicResource ActiveBorderBrushKey}" />
                    <Setter Property="Foreground"
						Value="{DynamicResource AccentForegroundBrushKey}" />
                </Trigger>
                <Trigger Property="IsEnabled"
					 Value="False">
                    <Setter Property="Opacity"
						Value="0.6" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    
    <i:Interaction.Triggers>
    
    	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>
    
    <Grid ShowGridLines="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition />
            <RowDefinition Height="96" />
        </Grid.RowDefinitions>

        <Border Grid.Row="0" Grid.ColumnSpan="2"
				metro:MetroWindow.IsCaptionBar="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <metro:CaptionIcon Grid.Column="0">
                    <Ellipse Width="18"
							 Height="18"
							 Fill="{DynamicResource ActiveForegroundBrushKey}" />
                </metro:CaptionIcon>
                <TextBlock Grid.Column="1" HorizontalAlignment="Right" Text="CaptionButton→" />
                <metro:CaptionButton Grid.Column="2" 
                                     HorizontalAlignment="Right"
								     IsChecked="{Binding TopMost, Mode=TwoWay}"
                                     ToolTip="常に最前面に表示"
										 Style="{DynamicResource PinButtonStyleKey}" />
                <metro:SystemButtons Grid.Column="3"
										VerticalAlignment="Top" />
            </Grid>
        </Border>


        <!--Badge-->
        <TextBlock Grid.Row="1">Badge</TextBlock>
        <StackPanel  Grid.Row="1" Grid.Column="1" Orientation="Horizontal">
            <metro:Badge Count="5" />
            <metro:Badge Count="12" />
            <metro:Badge Count="124" />
        </StackPanel>
        
        <!--BindableRichTextBlock-->
        <TextBlock Grid.Row="2">BindableRichTextBlock</TextBlock>
        <TextBlock Grid.Row="2" Grid.Column="1">※未実装※テキストソースがバインド可能なリッチテキストボックス</TextBlock>
        
        <!--BindableTextBlock-->
        <TextBlock Grid.Row="3">BindableRichTextBlock</TextBlock>
        <metro:BindableTextBlock Grid.Row="3" Grid.Column="1" TextSource="{Binding Players}" TextWrapping="Wrap">
            <metro:BindableTextBlock.TextTemplates>
                <!--TextBlockにコレクションをバインドできるように-->
                <DataTemplate DataType="{x:Type vm:Player}">
                    <metro:InlineHolder>
                        <Run Text="{Binding Name}" />
                        <Run Text="," />
                    </metro:InlineHolder>
                </DataTemplate>
            </metro:BindableTextBlock.TextTemplates>
        </metro:BindableTextBlock>
        
        <!--CaptionButton-->
        <TextBlock Grid.Row="4">CaptionButton</TextBlock>
        <TextBlock Grid.Row="4" Grid.Column="1" TextWrapping="Wrap">ウィンドウのキャプション部分で使用するために最適化されたボタン（サンプル：「最前面に表示」ボタン）</TextBlock>

        <!--ProgressRing-->
        <TextBlock Grid.Row="5">ProgressRing</TextBlock>
        <metro:ProgressRing Grid.Row="5" Grid.Column="1" Foreground="{StaticResource AccentBrushKey}" />

        <!--PromptTextBox-->
        <TextBlock Grid.Row="6">PromptTextBox</TextBlock>
        <StackPanel Grid.Row="6" Grid.Column="1" >
            <TextBlock>テキスト未入力時に指定の文字列を表示する</TextBlock>
            <metro:PromptTextBox Prompt="検索" />
            <TextBox>通常のテキストボックス</TextBox>
        </StackPanel>
        
    </Grid>
</metro:MetroWindow>
